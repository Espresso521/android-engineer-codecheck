楽天ペイのような大きなアプリでもMVVMというアーキテクチャを使っていない。

理由は楽天ペイアプリは古いアプリ、幾つ年の前にから開発のアプリだかもしれない。

今には新しいアプリ開発を開始するとき、MVVMというアーキテクチャを使っています。

一般的に言えば、MVVMで使ったアプリはUIレイヤーとデータレイヤーを基づいて開発していく。

大きなプロジェクト言えば、普通は複雑なビジネスを含めるとき、ドメインレイヤーというレイヤーが使っています。

このレイヤーはUIレイヤーとデータレイヤーの間で存在している。

Hiltを使っていたら、コードはクリーンになっていく。

前の回の面談は、僕にたくさん助けをもらいました。

＝＝＝＞　Domain Layer
ドメイン層は、複雑なビジネスロジックや、複数のViewModelで再利用されるシンプルなビジネスロジックをカプセル化する役割を担っています。
例えば、複雑なロジックを扱うためや、再利用性をサポートするためなどです。

ドメインレイヤーには以下のような利点があります：

    コードの重複(ちょうふく)を避けることができる。
    ドメインレイヤークラスを使用(しよう)するクラスの可読性(かどくせい)が向上(こうじょう)する。
    アプリケーションのテスト可能性を向上させる。
    大規模なクラスが回避(かいひ)されるように、責任を分担(ぶんたん)することが可能(かのう)になる。

＝＝＝＞　UseCase
UI層(そう)に存在する繰り返し可能なビジネスロジックをユースケースクラスにカプセル化する。

さらに、ユースケースは共通(きょうつう)の機能(きのう)（ベースクラスでのスレッド処理、エラー処理など）を共有(きょうゆう)できるため、より大規模なチームでの使用に有効(ゆうこう)です。

＝＝＝＞　Data Layer
UI層にはUIに関連する状態(じょうたい)とUIロジックが、データ層にはアプリケーションデータとビジネスロジックが含(ふく)まれます。

このように関心事(かんしんじ)を分離(ぶんり)することで、データレイヤーを複数の画面で使用したり、アプリケーションの異なる部分間(ぶぶんかん)で情報(じょうほう)を共有(きょうゆう)したり、
ユニットテストのためにビジネスロジックをUIの外に複製(ふくせい)することができます。

データレイヤーは複数(ふくすう)のリポジトリで構成(こうせい)され、各(かく)リポジトリにはゼロから複数のデータソースを含(ふく)めることができます。

リポジトリクラスは、以下のタスクを担当(たんとう)します：

    アプリケーションの他の部分にデータを公開(こうかい)する。
    データの変更(へんこう)を集中管理(しゅうちゅうかんり)する。
    複数のデータソース間の競合(きょうごう)を解決(かいけつ)する。
    アプリケーションの他の部分からデータソースを抽象化(ちゅうしょうか)する。
    ビジネスロジックを含める。

各データソース・クラスは、1つのデータソースのみを扱う責任(あつかうせきにん)を担うべきであり、対応(たいおう)するデータソースは、ファイル、ネットワーク・ソース、ローカル・データベースのいずれでもよい。



